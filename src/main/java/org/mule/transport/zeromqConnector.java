/**
 * Mule Development Kit
 * Copyright 2010-2011 (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This file was automatically generated by the Mule Development Kit
 */
package org.mule.transport;

import org.mule.api.ConnectionException;
import org.mule.api.annotations.*;
import org.mule.api.annotations.param.ConnectionKey;
import org.mule.api.annotations.param.Payload;
import org.mule.api.callback.SourceCallback;
import org.zeromq.ZMQ;

@Connector(name = "zeromq", schemaVersion = "1.0-SNAPSHOT")
public class zeromqConnector {

    public enum ExchangePattern {

        REQUEST_RESPONSE, ONE_WAY, PUBLISH
    }

    private ZMQ.Context zmqContext;

    /**
     * Configurable
     */
    @Configurable
    private String myProperty;

    /**
     * Set property
     *
     * @param myProperty My property
     */
    public void setMyProperty(String myProperty) {
        this.myProperty = myProperty;
    }

    /**
     * Connect
     *
     * @param username A username
     * @param password A password
     * @throws ConnectionException
     */
    @Connect
    public void connect(@ConnectionKey String username, String password)
            throws ConnectionException {

        if (zmqContext == null) {
            zmqContext = ZMQ.context(1);
        }

    }

    /**
     * Disconnect
     */
    @Disconnect
    public void disconnect() {
        /*
         * CODE FOR CLOSING A CONNECTION GOES IN HERE
         */
    }

    /**
     * Are we connected
     */
    @ValidateConnection
    public boolean isConnected() {
        return false;
    }

    /**
     * Are we connected
     */
    @ConnectionIdentifier
    public String connectionId() {
        return "001";
    }

    /**
     * Custom processor
     * <p/>
     * {@sample.xml ../../../doc/zeromq-connector.xml.sample zeromq:outbound-endpoint}
     *
     * @param address         Content to be processed
     * @param exchangePattern Content to be processed
     * @param payload         Content to be processed
     * @return Some string
     */
    @Processor
    public byte[] outboundEndpoint(String address, ExchangePattern exchangePattern, @Payload byte[] payload) throws Exception {
        ZMQ.Socket socket;
        byte[] reply;

        if (exchangePattern.equals(ExchangePattern.PUBLISH)) {
            socket = zmqContext.socket(ZMQ.PUB);

            String[] subscribers = address.split(";");

            for (String subscriber : subscribers) {
                socket.bind(subscriber);
            }

            socket.send(payload, 0);

            reply = payload;
        } else if (exchangePattern.equals(ExchangePattern.REQUEST_RESPONSE)) {
            socket = zmqContext.socket(ZMQ.REQ);
            socket.connect(address);

            reply = socket.recv(0);
        } else {
            socket = zmqContext.socket(ZMQ.REQ);
            socket.connect(address);

            socket.send(payload, 0);

            reply = payload;
        }

        socket.close();

        return reply;
    }

    public void inboundEndpoint(String address, final SourceCallback callback) throws Exception {
        callback.process();

    }
}
